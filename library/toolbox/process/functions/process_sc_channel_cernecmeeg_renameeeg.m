function varargout = process_sc_channel_cernecmeeg_renameeeg( varargin )
% process_sc_channel_cernecmeeg_renameeeg: Specific to MEG-EEG montage at
% CERNEC (Montreal University). Rename EEG channels to intelligible labels
% (EEG001->Fp1, ...).
% 
% External calls:
% 
%       labels = process_sc_channel_cernecmeeg_renameeeg('renameEEG',labels)
% 
% Authors: Jonathan Godbout, 2013

macro_methodcall;
end


%% ===== GET DESCRIPTION =====
function sProcess = GetDescription() %#ok<DEFNU>    
    % ===== PROCESS =====
    % Description the process
    sProcess.Comment     = 'CHANNEL > CERNEC MEEG > Rename EEG labels';
    sProcess.FileTag     = '';
    sProcess.Description = 'Rename EEG channels to intelligible labels (EEG001->Fp1, ...)';
    sProcess.Category    = 'Custom';
    sProcess.Index       = sc_bst_process_index(365);
    sProcess.SubGroup    = sc_bst_process_subgroup(sProcess.Index);
    % Definition of the input accepted by this process
    sProcess.InputTypes  = {'raw'};
    sProcess.OutputTypes = {'raw'};
    sProcess.nInputs     = 1;
    sProcess.nMinFiles   = 1;
    sProcess.isSeparator = 1;
    % === 
    sProcess.options.label1.Comment = '<HTML>Rename EEG channels to intelligible labels (EEG001->Fp1, ...)';
    sProcess.options.label1.Type    = 'label';

end


%% ===== FORMAT COMMENT =====
function Comment = FormatComment(sProcess) %#ok<DEFNU>
    Comment = sProcess.Comment;
end


%% ===== RUN =====
function OutputFiles = Run(sProcess, sInputs) %#ok<DEFNU>
        
% === COMPUTE ON ALL FILES ===
for iInput=1:numel(sInputs)
    
    % Get file's channel file struct
    sChan = in_bst_channel(sInputs(iInput).ChannelFile);
    % Channels labels
    labels = {sChan.Channel.Name};
     
    % Process labels
    labels = renameEEG(labels); 
    
    % Get BIOSEMI 10-10 EEG channel file to fit positions
    bstDefaults = bst_get('EegDefaults');
    iColin = find(strcmpi({bstDefaults.name},'Colin27'));
    iBiosemi1010 = find(strcmpi({bstDefaults(iColin).contents.name},'BioSemi 64 10-10')); 
    sFit = load(bstDefaults(iColin).contents(iBiosemi1010).fullpath);
    sFitNames = {sFit.Channel.Name};
    
    % Update EEG channels info (name, position, ...)
    for iChan=1:numel(labels)
        % Make sure to at least update the name 
        sChan.Channel(iChan).Name = labels{iChan};
        % If fit found, add other info
        iFit = find(strcmpi(sFitNames,labels{iChan}));
        if ~isempty(iFit)
            sChan.Channel(iChan).Type = sFit.Channel(iFit).Type;
            sChan.Channel(iChan).Weight = sFit.Channel(iFit).Weight;
            sChan.Channel(iChan).Loc = sFit.Channel(iFit).Loc;
        end
    end
    
    % ===== UPDATE CHANNEL FILE =====
    % Get channel studies
    [tmp, iChanStudies] = bst_get('ChannelForStudy', [sInputs(iInput).iStudy]);
    iChanStudies = unique(iChanStudies);
    % Set options
    ChannelAlign = 0;% 2 * double(sProcess.options.channelalign.Value);
    ChannelReplace = 2;
    UpdateData = 1;
    % Update channel file in database
    db_set_channel(iChanStudies, sChan, ChannelReplace, ChannelAlign, UpdateData);
end

% Return all the files in input
OutputFiles = {sInputs.FileName};

end

% ==
function channel_out = renameEEG(channel_in)

name_code = {...
'EEG001'; ...
'EEG002'; ...
'EEG003'; ...
'EEG004'; ...
'EEG005'; ...
'EEG006'; ...
'EEG007'; ...
'EEG008'; ...
'EEG009'; ...
'EEG010'; ...
'EEG011'; ...
'EEG012'; ...
'EEG013'; ...
'EEG014'; ...
'EEG015'; ...
'EEG016'; ...
'EEG017'; ...
'EEG018'; ...
'EEG019'; ...
'EEG020'; ...
'EEG021'; ...
'EEG022'; ...
'EEG023'; ...
'EEG024'; ...
'EEG025'; ...
'EEG026'; ...
'EEG027'; ...
'EEG028'; ...
'EEG029'; ...
'EEG030'; ...
'EEG031'; ...
'EEG032'; ...
'EEG033'; ...
'EEG034'; ...
'EEG035'; ...
'EEG036'; ...
'EEG037'; ...
'EEG038'; ...
'EEG039'; ...
'EEG040'; ...
'EEG041'; ...
'EEG042'; ...
'EEG043'; ...
'EEG044'; ...
'EEG045'; ...
'EEG046'; ...
'EEG047'; ...
'EEG048'; ...
'EEG049'; ...
'EEG050'; ...
'EEG051'; ...
'EEG052'; ...
'EEG053'; ...
'EEG054'; ...
'EEG055'; ...
'EEG056'; ...
'EEG057'; ...
'EEG058'; ...
'EEG059'};

name_real = {...
'FP1'; ...
'FPz'; ...
'FP2'; ...
'AF7'; ...
'AF3'; ...
'AFz'; ...
'AF4'; ...
'AF8'; ...
'F7'; ...
'F3'; ...
'F1'; ...
'Fz'; ...
'F2'; ...
'F4'; ...
'F8'; ...
'FT9'; ...
'FC5'; ...
'FC3'; ...
'FC1'; ...
'FC2'; ...
'FC4'; ...
'FC6'; ...
'FT10'; ...
'T7'; ...
'C5'; ...
'C3'; ...
'C1'; ...
'Cz'; ...
'C2'; ...
'C4'; ...
'C6'; ...
'T8'; ...
'CP5'; ...
'CP3'; ...
'CP1'; ...
'CP2'; ...
'CP4'; ...
'CP6'; ...
'P9'; ...
'P7'; ...
'P3'; ...
'P1'; ...
'Pz'; ...
'P2'; ...
'P4'; ...
'P8'; ...
'P10'; ...
'PO7'; ...
'PO3'; ...
'POz'; ...
'PO4'; ...
'PO8'; ...
'O1'; ...
'FCz'; ...
'O2'; ...
'CPz'; ...
'VEOG'; ...
'HEOG'; ...
'ECG'};

if iscell(channel_in)
    channel_out = cell(size(channel_in));
    for ii=1:numel(channel_in)
        match = find(strcmpi(name_code, channel_in{ii}));
        if isempty(match)
            channel_out(ii) = channel_in(ii);
        else
            channel_out(ii) = name_real(match);
        end
    end
elseif ischar(channel_in)
    match = find(strcmpi(name_code, channel_in));
    if isempty(match)
        channel_out = channel_in;
    else
        channel_out = name_real(match);
    end
elseif isnumeric(channel_in)
    channel_out = name_real(channel_in);
end

if numel(channel_out)==1 && iscell(channel_out)
    channel_out = channel_out{1};
end
end

