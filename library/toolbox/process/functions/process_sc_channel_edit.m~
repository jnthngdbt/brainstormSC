function varargout = process_sc_channel_edit( varargin )
% process_sc_channel_edit: Edit informations in channel file in a script
% way

% @=============================================================================
% This software is part of the Brainstorm software:
% http://neuroimage.usc.edu/brainstorm
% 
% Copyright (c)2000-2012 Brainstorm by the University of Southern California
% This software is distributed under the terms of the GNU General Public License
% as published by the Free Software Foundation. Further details on the GPL
% license can be found at http://www.gnu.org/copyleft/gpl.html.
% 
% FOR RESEARCH PURPOSES ONLY. THE SOFTWARE IS PROVIDED "AS IS," AND THE
% UNIVERSITY OF SOUTHERN CALIFORNIA AND ITS COLLABORATORS DO NOT MAKE ANY
% WARRANTY, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO WARRANTIES OF
% MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, NOR DO THEY ASSUME ANY
% LIABILITY OR RESPONSIBILITY FOR THE USE OF THIS SOFTWARE.
%
% For more information type "brainstorm license" at command prompt.
% =============================================================================@
%
% Authors: Jonathan Godbout, 2013

macro_methodcall;
end


%% ===== GET DESCRIPTION =====
function sProcess = GetDescription() %#ok<DEFNU>
    
    % ===== PROCESS =====
    % Description the process
    sProcess.Comment     = 'CHANNEL > Edit';
    sProcess.FileTag     = '';
    sProcess.Description = 'Edit informations in channel file in a script way';
    sProcess.Category    = 'Custom';
    sProcess.SubGroup    = 'CARSM';
    sProcess.Index       = 335;
    % Definition of the input accepted by this process
    sProcess.InputTypes  = {'raw'};
    sProcess.OutputTypes = {'raw'};
    sProcess.nInputs     = 1;
    sProcess.nMinFiles   = 1;
    sProcess.isSeparator = 0;
    %
    sProcess.options.sensortypes.Comment = 'Sensor types or names (empty=all)';
    sProcess.options.sensortypes.Type    = 'text';
    sProcess.options.sensortypes.Value   = 'EEG';
    %
    sProcess.options.prefix.Comment = 'Add prefix';
    sProcess.options.prefix.Type    = 'text';
    sProcess.options.prefix.Value   = [];
    %
    sProcess.options.suffix.Comment = 'Add suffix';
    sProcess.options.suffix.Type    = 'text';
    sProcess.options.suffix.Value   = [];
end


%% ===== FORMAT COMMENT =====
function Comment = FormatComment(sProcess) %#ok<DEFNU>
    Comment = sProcess.Comment;
end


%% ===== RUN =====
function OutputFiles = Run(sProcess, sInputs) %#ok<DEFNU>
  
% Get input options
prefix = sProcess.options.prefix.Value;
suffix = sProcess.options.suffix.Value;
sensor = sProcess.options.sensortypes.Value;

for i=1:numel(sInputs)
    
    sChan = in_bst_channel(sInputs(i).ChannelFile);
    
    [iChannels, Comment] = channel_find(sChan.Channel, sensor);
    
    if ~isempty(prefix)
        
    end
    
    labels = {sChan.Channel.Name};
    
    [tmp, iChanStudies] = bst_get('ChannelForStudy', [sInputs(i).iStudy]);
    iChanStudies = unique(iChanStudies);
    ChannelAlign = 0;% 2 * double(sProcess.options.channelalign.Value);
    FileFormat = 'BST';
    ChannelReplace = 2;
    UpdateData =
    db_set_channel( iStudy, ChannelMat,  ChannelReplace, ChannelAlign, UpdateData)
    
% % %     % ===== SET CHANNEL FILE =====
% % %     % Get channel studies
% % %     [tmp, iChanStudies] = bst_get('ChannelForStudy', [sInputs(i).iStudy]);
% % %     iChanStudies = unique(iChanStudies);
% % %     % Import channel files
% % %     ChannelAlign = 0;% 2 * double(sProcess.options.channelalign.Value);
% % %     FileFormat = 'BST';
% % %     ChannelReplace = 2;
% % %     import_channel(iChanStudies, ChannelFile, FileFormat, ChannelReplace, ChannelAlign);
end

% Return all the files in input
OutputFiles = {sInputs.FileName};

end

